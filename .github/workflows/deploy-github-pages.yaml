# Simple workflow for deploying static content to GitHub Pages
name: Deploy static content to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: pages
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - uses: actions/checkout@v3

      - id: parsing
        run: |
          echo "repos=$(yq -o json '.[0].repos' files.yaml | jq . --compact-output)" | tee -a $GITHUB_OUTPUT

      - uses: actions/github-script@v6
        id: subpage-info
        with:
          script: |
            const owner = '${{ github.repository_owner }}'
            const path = '.github/workflows/random.yaml'
            const repos = ${{ steps.parsing.outputs.repos }}
            const repoContent = []
            for (repo of repos) {
              const content = await github.rest.repos.getContent({
                owner,
                repo,
                path,
              })
              repoContent.push({content: content.data.content, repo: repo})
            }

            const reduced = repoContent.reduce((acc, curr) => {
              return acc[curr.content] ? acc[curr.content].push(curr.repo) : acc[curr.content] = [curr.repo], acc
            }, {})

            const reducedList = []
            for (content of Object.keys(reduced)) {
              const obj = {content: content, repos: reduced[content]}
              reducedList.push(obj)
            }

            return JSON.stringify(
              reducedList.sort((a, b) => b.repos.length - a.repos.length)
            )
          result-encoding: string


      - name: Generate subpage from data
        env:
          REPOS_CONTENT: ${{ steps.subpage-info.outputs.result }}
        run: |
          echo '<html><head><link rel="stylesheet" href="./styles.css"></head><body>' \
            >> _site/random.html
          jq --compact-output '.[]' <<< "$REPOS_CONTENT" | while read -r obj; do
            echo "<pre><h1>$(jq --raw-output --compact-output '.repos' <<< $obj)</h1></pre>"
            content=$(jq --raw-output '.content' <<< $obj)
            echo '<div class="code"><pre>'
            echo -n "$content" | base64 --decode
            echo '</pre></div><hr />'
          done >> _site/random.html
          echo '</body></html>' >> _site/random.html

      - uses: actions/configure-pages@v3

      - name: Upload directory of site, _site/
        uses: actions/upload-pages-artifact@v1

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
